using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class #SCRIPTNAME# : WeaponBase
{
    public #SCRIPTNAME#() { }
	public #SCRIPTNAME#(GameCharacter gameCharacter, ScriptableWeapon weaponData) : base (gameCharacter, weaponData)
	{ }

    public override void EquipWeapon()
    {
        base.EquipWeapon();
    }

    public override void UnEquipWeapon()
    {
        base.UnEquipWeapon();
	}

    public override void UpdateWeapon(float deltaTime)
    {
        base.UpdateWeapon(deltaTime);
    }

    	public override AttackAnimationData GroundAttack()
	{
		return base.GroundAttack();
	}
	public override AttackAnimationData GroundUpAttack()
	{
		return base.GroundUpAttack();
	}
	public override AttackAnimationData GroundDownAttack()
	{
		return base.GroundDownAttack();
	}
	public override AttackAnimationData GroundDirectionAttack()
	{
		return base.GroundDirectionAttack();
	}

	public override AttackAnimationData AirAttack()
	{
		return base.AirAttack();
	}
	public override AttackAnimationData AirUpAttack()
	{
		return base.AirUpAttack();
	}
	public override AttackAnimationData AirDownAttack()
	{
		return base.AirDownAttack();
	}
	public override AttackAnimationData AirDirectionAttack()
	{
		return base.AirDirectionAttack();
	}

	public override AttackAnimationData DefensiveAction()
	{
		return base.DefensiveAction();
	}

    public override void GroundAttackHit(GameObject hitObj)
	{
        IDamage damageInterface = GetDamageInterface(hitObj);
        if (damageInterface == null) return;
        damageInterface.DoDamage(GameCharacter, 10);
	}

	public override void GroundUpAttackHit(GameObject hitObj)
	{
		IDamage damageInterface = GetDamageInterface(hitObj);
		if (damageInterface == null) return;
		damageInterface.DoDamage(GameCharacter, 10);
	}

	public override void GroundDownAttackHit(GameObject hitObj)
	{
		IDamage damageInterface = GetDamageInterface(hitObj);
		if (damageInterface == null) return;
		damageInterface.DoDamage(GameCharacter, 10);
	}

	public override void GroundDirectionAttackHit(GameObject hitObj)
	{
		IDamage damageInterface = GetDamageInterface(hitObj);
		if (damageInterface == null) return;
		damageInterface.DoDamage(GameCharacter, 10);
	}

	public override void AirAttackHit(GameObject hitObj)
	{
		IDamage damageInterface = GetDamageInterface(hitObj);
		if (damageInterface == null) return;
		damageInterface.DoDamage(GameCharacter, 10);
	}

	public override void AirUpAttackHit(GameObject hitObj)
	{
		IDamage damageInterface = GetDamageInterface(hitObj);
		if (damageInterface == null) return;
		damageInterface.DoDamage(GameCharacter, 10);
	}

	public override void AirDownAttackHit(GameObject hitObj)
	{
		IDamage damageInterface = GetDamageInterface(hitObj);
		if (damageInterface == null) return;
		damageInterface.DoDamage(GameCharacter, 10);
	}

	public override void AirDirectionAttackHit(GameObject hitObj)
	{
		IDamage damageInterface = GetDamageInterface(hitObj);
		if (damageInterface == null) return;
		damageInterface.DoDamage(GameCharacter, 10);
	}

	public override void AttackEnd()
	{
		foreach (GameObject go in hitObjects)
		{
			if (go == null) continue;
			GameCharacter character = go.GetComponent<GameCharacter>();
			if (character == null) continue;
			character.CombatComponent.HookedToCharacter = null;
		}
	}
}